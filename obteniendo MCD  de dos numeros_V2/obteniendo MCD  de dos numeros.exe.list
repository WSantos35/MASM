EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
obteniendo MCD  de dos numeros.exe -- emu8086 assembler version: 4.08  
 
[ 2/08/2019  --  2:07:39 p. m. ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;Programa que obtiene el Maximo comun divisor de dos numeros
[   2]        :                                       ;usando el algoritmo de Euclides
[   3]        :                                       .model small
[   4]        :                                       
[   5]        :                                       .stack
[   6]        :                                       
[   7]        :                                       .data
[   8]        :                                       
[   9]        :                                       .code
[  10]        :                                       
[  11]    0100: BA 10 00 8E DA                        .startup
[  12]    0105: B8 14 00                              MOV     ax, 20          ;ax va a ser el numero mayor
[  13]    0108: BB 0C 00                              MOV     bx, 12          ;bx va a ser el menor
[  14]        :                                       
[  15]        :                                       ;determinando el mayor de los numeros
[  16]    010B: 3B C3                                 CMP     ax, bx
[  17]    010D: 78 02                                 JS      intercambiar
[  18]    010F: EB 01                                 JMP     calcular_MCD
[  19]        :                                       
[  20]    0111:                                       intercambiar:
[  21]    0111: 93                                    XCHG    ax, bx      ;intercambiando los registros
[  22]        :                                       
[  23]        :                                       
[  24]    0112:                                       calcular_MCD:
[  25]    0112: 53                                    PUSH    bx
[  26]    0113: F7 F3                                 DIV     bx          ;dividir ax entre bx
[  27]    0115: 83 FA 00                              CMP     dx, 0       ;comparando si el residuo es cero
[  28]    0118: 74 07                                 JZ      resultado
[  29]        :                                       ;MOV     ax, bx      ;el numero menor ahora va a ser el mayor
[  30]    011A: 8B DA                                 MOV     bx, dx      ;el residuo ahora sera el menor
[  31]    011C: 33 D2                                 XOR     dx, dx      ;limpiando el registro dx
[  32]    011E: 58                                    POP     ax
[  33]    011F: EB F1                                 JMP     calcular_MCD;Vuelve a repetir el proceso
[  34]        :                                       
[  35]    0121:                                       resultado:
[  36]    0121: 5A                                    POP     dx          ;saca de la pila el ultimo numero menor el cual es el resultado
[  37]        :                                       
[  38]        :                                       
[  39]    0122:                                       salir:
[  40]    0122: B8 07 0C                              MOV     ax, 0c07h
[  41]    0125: CD 21                                 INT     21h
[  42]        :                                       
[  43]    0127: B8 00 4C CD 21                        .exit
[  44]        :                                       
[  45]        :                                       end
[  46]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2C      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 8E      -   check sum (l.byte)
0013: 71      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 10      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 10      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
