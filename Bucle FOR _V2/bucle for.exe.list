EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
bucle for.exe -- emu8086 assembler version: 4.08  
 
[ 2/08/2019  --  9:13:34 a. m. ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;Programa que imprime 10 veces una cadena como un ciclo for
[   2]        :                                       .model small
[   3]        :                                       
[   4]        :                                       .stack
[   5]        :                                       
[   6]        :                                       .data
[   7]    0100: 00                                    cont    db 0                            ;inicializamos nuestro contador con 0
[   8]    0101: 0A 0D 21 68 6F 6C 61 20 71 75 65 20   msg     db 10,13,"!hola que tal!$"      ;cadena a imprimir
                74 61 6C 21 24                      
[   9]        :                                       
[  10]        :                                       .code
[  11]        :                                       
[  12]        :                                       
[  13]    0120: BA 10 00 8E DA                        .startup
[  14]        :                                       
[  15]        :                                       
[  16]    0125:                                       ciclo:
[  17]    0125: 80 3E 00 00 0A                        CMP  cont,10             ;comparamos cont con 10
[  18]    012A: 74 0D                                 JE   salir               ;si contador=10 se ejecuta este salto
[  19]    012C: B4 09                                 MOV  ah, 09h             ;en caso contrario va a imprimir la cadena
[  20]    012E: BA 01 00                              MOV  dx, offset msg
[  21]    0131: CD 21                                 INT  21h
[  22]    0133: FE 06 00 00                           INC  cont                ;incrementamos contador
[  23]    0137: EB EC                                 JMP  ciclo               ;regresamos al inicio de la etiqueta ciclo
[  24]        :                                       
[  25]        :                                       
[  26]    0139:                                       salir:
[  27]    0139: B8 07 0C                              MOV     ax, 0c07h
[  28]    013C: CD 21                                 INT     21h
[  29]    013E: B8 00 4C CD 21                        .exit
[  30]        :                                       
[  31]        :                                       end
[  32]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 43      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 31      -   check sum (l.byte)
0013: F4      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 12      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 12      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
